spring.datasource.url=jdbc:mysql://localhost:3306/order-service?autoreconnect=true&createDatabaseIfNotExist=true&characterEncoding=utf8
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.hibernate.ddl-auto=update

server.port=8081
spring.application.name=order-service

#EUREKA SERVER ADDRESS
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

#Actuator Properties
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#Resilinece4j Properties
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

#Resilience4J Timeout Properties
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

#Resilience4J Retry Properties
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s



#PROPERTIES EXPLANATION FIRST 8
#resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true:
#This means that a health indicator for the "inventory" circuit breaker instance
# is registered with the application's health check mechanism
# (for example, Spring Boot's Actuator health endpoint).
# This allows you to monitor the state of the circuit breaker (closed, open, half-open)
# and its statistics.
#
#resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10:
#This is the size of the ring buffer where the events of the "inventory" circuit breaker instance are stored.
# This buffer is used when you want to consume the emitted CircuitBreakerEvents like a state transition from CLOSED to OPEN.
#
#resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED:
#This sets the type of sliding window to be used for the "inventory" circuit breaker instance.
# A count-based window keeps track of the last N calls, regardless of the time they occurred.
#
#resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5:
#This is the size of the sliding window, which is 5 calls in this case, given that the window type is COUNT_BASED.
#
#resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50:
#This is the failure rate threshold for the "inventory" circuit breaker instance.
# If more than 50% of the calls in the sliding window fail, the circuit breaker will transition to the open state.
#
#resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s:
#This is the amount of time the "inventory" circuit breaker instance will stay in the open state before transitioning to the half-open state.
# In this case, it's 5 seconds.
#
#resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3:
#This is the number of calls permitted when the "inventory" circuit breaker instance is in the half-open state.
# These calls are used to test whether the downstream service has recovered.
#
#resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true:
#This indicates that the "inventory" circuit breaker instance will automatically transition from the open state to
# the half-open state after the waitDurationInOpenState has passed. If this was false, it would require manual intervention to move it
# from open to half-open.

#resilience4j.timelimiter.instances.inventory.timeout-duration=3s:
#This configuration sets a timeout duration for the "inventory" time limiter instance.
#In this case, it's set to 3 seconds. The TimeLimiter in Resilience4j is a decorator which ensures that
#a given method call will not last longer than a specific amount of time. If the method call takes longer than the configured timeout duration,
#it is automatically cancelled and a TimeoutException is thrown.
#This can be especially useful when dealing with methods that perform network calls or any other operations
# that might potentially hang and consume resources unnecessarily.

#resilience4j.retry.instances.inventory.max-attempts=3:
#This property defines the maximum number of attempts that will be made to execute
# a failed operation before giving up. In this case, the "inventory" instance is configured to retry the operation up to 3 times.
# If the operation fails for the first time, Resilience4j will automatically retry it, and if it fails again,
# it will retry for the second time. If the operation fails for the third time, the retry mechanism will give up and
# not make any further attempts.
#
#resilience4j.retry.instances.inventory.wait-duration=5s:
#This property determines the wait duration between retry attempts for the "inventory" instance.
# After a failed attempt, Resilience4j will wait for the specified duration before making the next retry attempt.
# In this case, the wait duration is set to 5 seconds ("5s").
# So, if the operation fails and Resilience4j decides to retry, it will wait for 5 seconds before initiating the next retry attempt.
# This delay allows for potential transient issues to resolve before retrying the operation.